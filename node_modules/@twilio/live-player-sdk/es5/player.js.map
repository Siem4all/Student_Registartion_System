{"version":3,"file":"player.js","sourceRoot":"","sources":["../lib/player.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sGAAsG;AAC9F,IAAS,UAAU,GAA0B,OAAO,CAAC,iBAAiB,CAAC,QAApD,CAAqD;AAEhF,iCAAsC;AACtC,iCAA2C;AAE3C,mDAG0B;AAG1B,iCAA+C;AAC/C,8CAAgD;AA+ChD,uEAAuE;AACvE,uEAAuE;AACvE,yCAAyC;AACzC,IAAI,aAAkB,CAAC;AAEvB;;GAEG;AACH,SAAgB,gBAAgB,CAAC,KAAU;IACzC,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;QACxC,aAAa,GAAG,KAAK,CAAC;KACvB;AACH,CAAC;AAJD,4CAIC;AAED,oEAAoE;AACpE,4BAA4B;AAC5B,IAAI,6BAA6B,GAAG,IAAI,CAAC;AAEzC,qEAAqE;AACrE,qEAAqE;AACrE,gCAAgC;AAChC,IAAI,iBAA0B,CAAC;AAE/B;;GAEG;AACH,SAAgB,oBAAoB,CAAC,KAAc;IACjD,IAAI,OAAO,iBAAiB,KAAK,WAAW,EAAE;QAC5C,iBAAiB,GAAG,KAAK,CAAC;KAC3B;AACH,CAAC;AAJD,oDAIC;AAED,qEAAqE;AACrE,oBAAoB;AACpB,IAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,SAAS,EAAE,CAAC;AAyEnD;;GAEG;AACH;IAAqC,0BAAY;IAqI/C,gBACE,WAAmB,EACnB,WAAmB,EACnB,kBAAgE,EAChE,OAAuB;QAJzB,YAKE,iBAAO,SAoDR;QA4XO,yBAAmB,GAAG;YAC5B,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;YACzD,IAAM,gBAAgB,GAA2D;gBAC/E,IAAI,EAAE,KAAI,CAAC,kBAAkB;gBAC7B,IAAI,EAAE,oBAAoB;gBAC1B,iBAAiB,EAAE,KAAI,CAAC,aAAa,CAAC,cAAc,EAAE;gBACtD,cAAc,EAAE,KAAI,CAAC,aAAa,CAAC,WAAW,EAAE;gBAChD,iBAAiB,EAAE,KAAI,CAAC,YAAY;gBACpC,YAAY,EAAE,KAAI,CAAC,aAAa,CAAC,SAAS,EAAE;gBAC5C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,EAAE,EAAE,KAAI,CAAC,SAAS;gBAClB,IAAI,EAAE,kBAAkB;aACzB,CAAC;YACF,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACpC,KAAI,CAAC,kBAAkB,gBAAQ,KAAI,CAAC,SAAS,CAAE,CAAC;QAClD,CAAC,CAAA;QA5bG,IAAA,oBAAoB,GAIlB,OAAO,qBAJW,EACpB,KAGE,OAAO,eAHY,EAArB,cAAc,mBAAG,IAAI,KAAA,EACrB,kBAAkB,GAEhB,OAAO,mBAFS,EAClB,mBAAmB,GACjB,OAAO,oBADU,CACT;QAEZ,IAAM,MAAM,GAAG,mBAAoB,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAExD,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,KAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC;YACtC,UAAU,EAAK,oBAAoB,uCAAkC,MAAM,cAAW;YACtF,UAAU,EAAK,oBAAoB,uCAAkC,MAAM,YAAS;SACrF,CAAC,CAAC;QAEH,wEAAwE;QACxE,0BAA0B;QAC1B,IAAM,YAAY,GAAG,KAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC;QAC9D,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;QAEhC,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAChD,aAAa,CAAC,GAAG,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;QAEtC,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;QACrD,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC;QACvE,KAAI,CAAC,kBAAkB,gBAAQ,KAAI,CAAC,SAAS,CAAE,CAAC;QAChD,KAAI,CAAC,gCAAgC,GAAG,KAAI,CAAC,yBAAyB,EAAE,CAAC;QAEzE,IAAI,kBAAkB,EAAE;YACtB,KAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;SAC9D;QACD,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAErC,KAAI,CAAC,yBAAyB,GAAG,IAAI,yCAAwB,CAC3D,KAAI,CAAC,aAAa,EAClB,SAAS,EACT,6BAA6B,CAAC,CAAC;QAEjC,KAAI,CAAC,uBAAuB,GAAG,IAAI,uCAAsB,CACvD,KAAI,CAAC,aAAa,EAClB,SAAS,CAAC,CAAC;QAEb,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAC/B,uCAAsB,CAAC,KAAK,CAAC,kBAAkB,EAC/C,cAAM,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC,CAAC;QAE5B,KAAI,CAAC,wBAAwB,EAAE,CAAC;;IAClC,CAAC;IA7KD,sBAAW,uCAA6B;QAhBxC;;;;;;;;;;;;;;;WAeG;aACH;YACE,OAAO,6BAA6B,CAAC;QACvC,CAAC;QAED;;;;;;;;;;;;;;WAcG;aACF,UAAyC,SAAkB;YAC1D,6BAA6B,GAAG,SAAS,CAAC;QAC5C,CAAC;;;OAnBA;IAyBD,sBAAW,qBAAW;QAJtB;;;WAGG;aACH;YACE,OAAO,iBAAiB,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAW,kBAAQ;QAHnB;;WAEG;aACH;YACE,OAAO,QAAQ,CAAC;QAClB,CAAC;;;OAAA;IAMD,sBAAW,mBAAS;QAJpB;;;WAGG;aACH;YACE,OAAO,SAAS,CAAC;QACnB,CAAC;;;OAAA;IAKD,sBAAW,iBAAO;QAHlB;;WAEG;aACH;YACE,OAAO,UAAU,CAAC;QACpB,CAAC;;;OAAA;IAED;;;;;OAKG;IACU,cAAO,GAApB,UAAqB,KAAa,EAAE,OAAuB;;;;gBACnD,UAAU,GAAgD;oBAC9D,IAAI,EAAE,YAAY;oBAClB,iBAAiB,EAAE,EAAE;oBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,IAAI,EAAE,YAAY;iBACnB,CAAC;gBACF,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAE9B,IAAI;oBACI,KAIF,wBAAgB,CAAC,KAAK,CAAC,EAHzB,WAAW,iBAAA,EACE,iBAAiB,iBAAA,EAC9B,kBAAkB,wBAAA,CACQ;oBACtB,SAAS,GAA+C;wBAC5D,IAAI,EAAE,WAAW;wBACjB,iBAAiB,mBAAA;wBACjB,kBAAkB,oBAAA;wBAClB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;wBACrB,IAAI,EAAE,YAAY;qBACnB,CAAC;oBACF,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;oBAC7B,sBAAO,IAAI,aAAa,CAAC,WAAW,EAAE,iBAAiB,wBAAO,OAAO,KAAE,kBAAkB,oBAAA,IAAG,EAAC;iBAC9F;gBAAC,OAAO,KAAK,EAAE;oBACR,eAAe,GAA2C;wBAC9D,IAAI,EAAE,OAAO;wBACb,WAAW,EAAE,KAAK;wBAClB,iBAAiB,EAAE,EAAE;wBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;wBACrB,IAAI,EAAE,YAAY;qBACnB,CAAC;oBACF,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;oBACnC,MAAM,KAAK,CAAC;iBACb;;;;KACF;IAED;;OAEG;IACI,kBAAW,GAAlB,UAAmB,KAAsB;QACvC,QAAQ,GAAG,KAAK,CAAC;QACjB,IAAM,oBAAoB,GAAG,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,GAAG;YACxD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAClC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY;YAChC,OAAA,YAAY,CAAC,WAAW,CAAC,oBAAoB,CAAC;QAA9C,CAA8C,CAAC,CAAC;IACpD,CAAC;IA6ED,sBAAI,sCAAkB;QAPtB;;;;;;WAMG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,UAAC,EAAwC;oBAAtC,OAAO,aAAA,EAAE,MAAM,YAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAAA,EAAE,KAAK,WAAA;gBAAO,OAAA,CAAC;oBAC1F,OAAO,SAAA;oBACP,MAAM,QAAA;oBACN,MAAM,QAAA;oBACN,IAAI,MAAA;oBACJ,KAAK,OAAA;iBACN,CAAC;YANyF,CAMzF,CAAC,CAAC;QACN,CAAC;;;OAAA;IAOA,sBAAI,4BAAQ;QALb;;;;WAIG;aACF;YACC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;;;OAAA;IAOD,sBAAI,2BAAO;QALX;;;;WAIG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QACtC,CAAC;aAED,UAAY,UAAmB;YAC7B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACxC,IAAM,QAAQ,GAAmC;gBAC/C,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;gBACtC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;gBAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;gBAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;gBACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,IAAI,EAAE,UAAU;aACjB,CAAC;YACF,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC;;;OAbA;IAkBD,sBAAI,+BAAW;QAHf;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QAC7C,CAAC;;;OAAA;IAKD,sBAAI,4BAAQ;QAHZ;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;;;OAAA;IAQD,sBAAI,2BAAO;QANX;;;;;WAKG;aACH;YACQ,IAAA,KAMF,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,EALjC,OAAO,aAAA,EACP,MAAM,YAAA,EACN,MAAM,YAAA,EACN,IAAI,UAAA,EACJ,KAAK,WAC4B,CAAC;YAEpC,OAAO;gBACL,OAAO,SAAA;gBACP,MAAM,QAAA;gBACN,MAAM,QAAA;gBACN,IAAI,MAAA;gBACJ,KAAK,OAAA;aACN,CAAC;QACJ,CAAC;aAED,UAAY,UAA0B;YACpC,IAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;gBACxE,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC;YAC1C,CAAC,CAAC,CAAC;YACH,IAAI,mBAAmB,EAAE;gBACvB,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;gBAChC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;gBACnD,IAAM,UAAU,GAAqD;oBACnE,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,aAAa;oBACnB,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;oBACtD,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;oBAChD,iBAAiB,EAAE,IAAI,CAAC,YAAY;oBACpC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;oBAC5C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,EAAE,EAAE,UAAU;oBACd,IAAI,EAAE,kBAAkB;iBACzB,CAAC;gBACF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACtC;QACH,CAAC;;;OAtBA;IA6BD,sBAAI,yBAAK;QALT;;;;WAIG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpE,CAAC;;;OAAA;IAKD,sBAAI,yBAAK;QAHT;;WAEG;aACH;YACE,OAAO;gBACL,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,IAAI,CAAC;gBACvD,kBAAkB,EAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;gBAC9D,kBAAkB,EAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;aAC/D,CAAC;QACJ,CAAC;;;OAAA;IAMD,sBAAI,+BAAW;QAJf;;;WAGG;aACH;YACE,OAAO,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAI,gCAAY;QAHhB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC;QAClD,CAAC;;;OAAA;IAKD,sBAAI,6BAAS;QAHb;;WAEG;aACH;YACQ,IAAA,KAA6C,IAAI,CAAC,YAAY,EAA/C,MAAM,iBAAA,EAAc,KAAK,gBAAsB,CAAC;YACrE,OAAO,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAI,0BAAM;QAHV;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;QACxC,CAAC;;;OAAA;IAED;;;;;;;;;;OAUG;IACH,uBAAM,GAAN,UAAO,YAA8B;QACnC,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QACxD,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,2BAAU,GAAV;QACE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QACD,IAAM,YAAY,GAAkD;YAClE,IAAI,EAAE,cAAc;YACpB,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,YAAY;SACnB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,sBAAK,GAAL;QACE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAM,MAAM,GAA0C;YACpD,IAAI,EAAE,QAAQ;YACd,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,UAAU;SACjB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACH,qBAAI,GAAJ;QACE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAC1B,IAAM,MAAM,GAA0C;YACpD,IAAI,EAAE,QAAQ;YACd,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,UAAU;SACjB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAE1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACH,uBAAM,GAAN,UAAO,QAAgB;QACrB,iEAAiE;QACjE,gFAAgF;QAChF,wEAAwE;QACxE,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAClD,IAAM,KAAK,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjF,IAAI,CAAC,KAAK,EAAE;YACV,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC;YAC3D,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,KAAK,CAAC;SACb;QAED,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC/F,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,oDAAoD,CAAC,CAAC;YACnH,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,KAAK,CAAC;SACb;QAED,IAAI,QAAQ,KAAK,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE;YACjD,0DAA0D;YAC1D,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SACjD;QAED,IAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACzD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAM,UAAU,GAA0C;YACxD,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,SAAS;YACf,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,UAAU;SACjB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,0BAAS,GAAT,UAAU,KAAa;QACrB,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACvD,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,oCAAoC,CAAC,CAAC;YACnG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,KAAK,CAAC;SACb;QACD,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;QACrD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,IAAM,SAAS,GAA6C;YAC1D,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,YAAY;YAClB,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,EAAE,EAAE,KAAK;YACT,IAAI,EAAE,UAAU;SACjB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAES,4BAAW,GAArB;QACE,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAES,mCAAkB,GAA5B,UAA6B,KAAmB;QAC9C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACrC,IAAM,aAAa,GAAyC;YAC1D,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,KAAK;YAClB,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,YAAY;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,UAAU;SACjB,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC;IACd,CAAC;IAKS,yBAAQ,GAAlB;QACE,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC;QACzC,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1E,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QAC5B,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,yCAAwB,GAAhC;QAAA,iBAsBC;QArBC,IAAM,OAAO,GAAG,UAAC,IAAY,IAAK,OAAA,CAAC;YACjC,IAAI,MAAA;YACJ,iBAAiB,EAAE,KAAI,CAAC,aAAa,CAAC,cAAc,EAAE;YACtD,cAAc,EAAE,KAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChD,iBAAiB,EAAE,KAAI,CAAC,YAAY;YACpC,YAAY,EAAE,KAAI,CAAC,aAAa,CAAC,SAAS,EAAE;YAC5C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,kBAAkB;SACzB,CAAC,EARgC,CAQhC,CAAC;QAEH,IAAI,CAAC,yBAAyB,CAAC,EAAE,CAC/B,yCAAwB,CAAC,KAAK,CAAC,4BAA4B,EAC3D,cAAM,OAAA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC,EAA7D,CAA6D,CAAC,CAAC;QAEvE,IAAI,CAAC,yBAAyB,CAAC,EAAE,CAC/B,yCAAwB,CAAC,KAAK,CAAC,oBAAoB,EACnD,cAAM,OAAA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,EAApD,CAAoD,CAAC,CAAC;QAE9D,IAAI,CAAC,yBAAyB,CAAC,EAAE,CAC/B,yCAAwB,CAAC,KAAK,CAAC,SAAS,EACxC,cAAM,OAAA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;IACpD,CAAC;IAkBH,aAAC;AAAD,CAAC,AA1kBD,CAAqC,qBAAY,GA0kBhD;AA1kBqB,wBAAM;AA4kB5B,WAAiB,MAAM;IACrB;;;OAGG;IACW,YAAK,GAAG,aAAW,CAAC;IAElC;;OAEG;IACH,IAAY,KA+CX;IA/CD,WAAY,KAAK;QACf;;WAEG;QACH,4CAAmC,CAAA;QAEnC;;;;WAIG;QACH,wBAAe,CAAA;QAEf;;WAEG;QACH,0CAAiC,CAAA;QAEjC;;WAEG;QACH,oCAA2B,CAAA;QAE3B;;WAEG;QACH,wCAA+B,CAAA;QAE/B;;WAEG;QACH,sCAA6B,CAAA;QAE7B;;WAEG;QACH,wDAA+C,CAAA;QAE/C;;WAEG;QACH,8CAAqC,CAAA;QAErC;;WAEG;QACH,wCAA+B,CAAA;IACjC,CAAC,EA/CW,KAAK,GAAL,YAAK,KAAL,YAAK,QA+ChB;IAED;;OAEG;IACH,IAAY,QAMX;IAND,WAAY,QAAQ;QAClB,2BAAe,CAAA;QACf,2BAAe,CAAA;QACf,yBAAa,CAAA;QACb,uBAAW,CAAA;QACX,yBAAa,CAAA;IACf,CAAC,EANW,QAAQ,GAAR,eAAQ,KAAR,eAAQ,QAMnB;IA8DD;;OAEG;IACH,IAAY,KAyBX;IAzBD,WAAY,KAAK;QACf;;WAEG;QACH,gCAAuB,CAAA;QAEvB;;WAEG;QACH,wBAAe,CAAA;QAEf;;WAEG;QACH,sBAAa,CAAA;QAEb;;WAEG;QACH,4BAAmB,CAAA;QAEnB;;WAEG;QACH,wBAAe,CAAA;IACjB,CAAC,EAzBW,KAAK,GAAL,YAAK,KAAL,YAAK,QAyBhB;IAsBD;;;OAGG;IACW,gBAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC;AA+BvD,CAAC,EAvNgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAuNtB;AAnyBqB,wBAAM;AAqyB5B,qEAAqE;AACrE,sEAAsE;AACtE,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;AAErC,wEAAwE;AACxE,+EAA+E;AAC/E,iCAAiC;AACjC,IAAM,aAAa,GAAG,IAAI,GAAG,EAAgB,CAAC","sourcesContent":["// TODO(mmalavalli): Ensure only the version is exported, and not the rest of the package.json fields.\nconst { version: sdkVersion }: { version: string } = require('../package.json');\n\nimport { EventEmitter } from 'events';\nimport { getPlaybackGrant } from './grant';\n\nimport {\n  LiveLatencyEventObserver,\n  PlayerPositionObserver,\n} from './eventobservers';\n\nimport { RequestCredentials } from './types';\nimport { Error as PlayerError } from './error';\nimport * as TelemetryExports from './telemetry';\n\nexport interface VendorPlayer {\n  addEventListener: (event: any, callback: (...args: any[]) => void) => void;\n  attachHTMLVideoElement: (videoElement: HTMLVideoElement) => void;\n  delete: () => void;\n  getBufferDuration: () => number;\n  getDecodedFrames: () => number;\n  getDroppedFrames: () => number;\n  getDuration: () => number;\n  getHTMLVideoElement: () => HTMLVideoElement;\n  getLiveLatency: () => number;\n  getPlaybackRate: () => number;\n  getPosition: () => number;\n  getQualities: () => VendorPlayerQuality[];\n  getQuality: () => VendorPlayerQuality;\n  getState: () => string;\n  getVideoBitRate: () => number;\n  getVolume: () => number;\n  isMuted: () => boolean;\n  load: (playbackUrl: string) => void;\n  pause: () => void;\n  play: () => void;\n  removeEventListener: (event: any, callback: (...args: any[]) => void) => void;\n  seekTo: (time: number) => void;\n  setLogLevel: (level: any) => void;\n  setMuted: (mute: boolean) => void;\n  setPlaybackRate: (rate: number) => void;\n  setQuality: (quality: VendorPlayerQuality) => void;\n  setRebufferToLive: (rebufferToLive: boolean) => void;\n  setRequestCredentials: (requestCredentials: RequestCredentials) => void;\n  setVolume: (level: number) => void;\n}\n\ninterface VendorPlayerConfig {\n  wasmBinary: string;\n  wasmWorker: string;\n}\n\ninterface VendorPlayerQuality {\n  bitrate: number;\n  codecs: string;\n  height: number;\n  name: string;\n  width: number;\n}\n\n// NOTE(mmalavalli): This represents the class derived from Player that\n// actually consumes the vendor sdk. For unit tests, this can be set to\n// a mock class using setDerivedPlayer().\nlet DerivedPlayer: any;\n\n/**\n * @private\n */\nexport function setDerivedPlayer(Class: any): void {\n  if (typeof DerivedPlayer === 'undefined') {\n    DerivedPlayer = Class;\n  }\n}\n\n// NOTE(csantos): Represents whether HighLatencyReduction is enabled\n// for all Player instances.\nlet isHighLatencyReductionEnabled = true;\n\n// NOTE(mmalavalli): This represents whether the browser is supported\n// by the vendor sdk. For unit tests, this can be set to a mock value\n// using setIsPlayerSupported().\nlet isPlayerSupported: boolean;\n\n/**\n * @private\n */\nexport function setIsPlayerSupported(value: boolean): void {\n  if (typeof isPlayerSupported === 'undefined') {\n    isPlayerSupported = value;\n  }\n}\n\n// NOTE(mmalavalli): This represents the Telemetry logger for all the\n// Player instances.\nconst telemetry = new TelemetryExports.Telemetry();\n\nexport declare interface Player {\n  /**\n   * The [[Player.duration]] property has changed.\n   * @param event [[Player.Event.DurationChanged]]\n   * @param listener A callback that has the updated [[Player.duration]], in seconds.\n   */\n  on(event: Player.Event.DurationChanged,\n    listener: (duration: number) => void): this;\n\n  /**\n   * The [[Player]] encountered an error while playing back the live stream.\n   * @param event [[Player.Event.Error]]\n   * @param listener A callback that has the [[Player.Error]]\n   */\n  on(event: Player.Event.Error, listener: (error: Player.Error) => void): this;\n\n  /**\n   * The [[Player]]'s playback quality changed.\n   * @param event [[Player.Event.QualityChanged]]\n   * @param listener A callback that has the updated [[Player.Quality]]\n   */\n  on(event: Player.Event.QualityChanged, listener: (quality: Player.Quality) => void): this;\n\n  /**\n   * The [[Player]] is rebuffering from a previous [[Player.State.Playing]] state.\n   * @param event [[Player.Event.Rebuffering]]\n   * @param listener A callback called when the event is emitted\n   */\n  on(event: Player.Event.Rebuffering, listener: () => void): this;\n\n  /**\n   * The player seeked to a given position (as requested by [[Player.seekTo]]).\n   * @param event [[Player.Event.SeekCompleted]]\n   * @param listener A callback that has the position where the seek completed, in seconds.\n   */\n  on(event: Player.Event.SeekCompleted,\n    listener: (position: number) => void): this;\n\n  /**\n   * The [[Player]]'s state changed.\n   * @param event [[Player.Event.StateChanged]]\n   * @param listener A callback that has the new [[Player.State]]\n   */\n  on(event: Player.Event.StateChanged,\n     listener: (state: Player.State) => void): this;\n\n  /**\n   * The [[Player]] received a timed metadata from the live stream source.\n   * @param event [[Player.Event.TimedMetadataReceived]]\n   * @param listener A callback that has the [[Player.TimedMetadata]]\n   */\n  on(event: Player.Event.TimedMetadataReceived,\n     listener: (metadata: Player.TimedMetadata) => void): this;\n\n  /**\n   * The [[Player]]'s video size changed.\n   * @param event [[Player.Event.VideoSizeChanged]]\n   * @param listener A callback that has the new [[Player.VideoDimensions]]\n   */\n  on(event: Player.Event.VideoSizeChanged,\n     listener: (videoSize: Player.VideoDimensions) => void): this;\n\n  /**\n   * The [[Player]]'s volume level changed.\n   * @param event [[Player.Event.VolumeChanged]]\n   * @param listener A callback that has the new volume level\n   */\n  on(event: Player.Event.VolumeChanged,\n     listener: (level: number) => void): this;\n}\n\n/**\n * A [[Player]] controls the playback of a live stream.\n */\nexport abstract class Player extends EventEmitter {\n  /**\n   * Whether high latency reduction is enabled for all Player instances.\n   * This is set to `true` by default.\n   * When set to `true`, the Player SDK will periodiocally inspect `player.liveLatency`\n   * and perform the following when high latency is observed:\n   *\n   *   1. If the live latency is between 3 and 5 seconds, the Player will increase\n   * the playback rate to a value that should not be perceptible to a user.\n   * The increased playback rate will allow the Player to catch up to the live source,\n   * and will be reverted once the live latency drops below 3 seconds.\n   * Application of this strategy may result in audio pitch distortion.\n   *\n   *   2. If the live latency is greater than or equal to 5 seconds,\n   * the Player will seek ahead to near the end of the Player's buffered content.\n   * The user will notice skips in the media content when this strategy is applied.\n   */\n  static get isHighLatencyReductionEnabled(): boolean {\n    return isHighLatencyReductionEnabled;\n  }\n\n  /**\n   * Sets whether high latency reduction is enabled for all Player instances.\n   * When set to `true`, the Player SDK will periodiocally inspect `player.liveLatency`\n   * and perform the following when high latency is observed:\n   *\n   *   1. If the live latency is between 3 and 5 seconds, the Player will increase\n   * the playback rate to a value that should not be perceptible to a user.\n   * The increased playback rate will allow the Player to catch up to the live source,\n   * and will be reverted once the live latency drops below 3 seconds.\n   * Application of this strategy may result in audio pitch distortion.\n   *\n   *   2. If the live latency is greater than or equal to 5 seconds,\n   * the Player will seek ahead to near the end of the Player's buffered content.\n   * The user will notice skips in the media content when this strategy is applied.\n   */\n   static set isHighLatencyReductionEnabled(isEnabled: boolean) {\n    isHighLatencyReductionEnabled = isEnabled;\n  }\n\n  /**\n   * Whether the SDK supports the browser. The SDK only supports\n   * browsers which are capable of running WebAssembly (WASM).\n   */\n  static get isSupported(): boolean {\n    return isPlayerSupported;\n  }\n\n  /**\n   * The SDK's log level.\n   */\n  static get logLevel(): Player.LogLevel {\n    return logLevel;\n  }\n\n  /**\n   * A [[Telemetry]] provides facilities for subscribing to event\n   * and metric data collected by the SDK.\n   */\n  static get telemetry(): Player.Telemetry {\n    return telemetry;\n  }\n\n  /**\n   * The SDK version.\n   */\n  static get version(): string {\n    return sdkVersion;\n  }\n\n  /**\n   * Connect to a live stream.\n   * @throws [[Player.Error]] or TypeError\n   * @param token The access token used to connect to the live stream\n   * @param options The options for creating a [[Player]]\n   */\n  static async connect(token: string, options: Player.Options): Promise<Player> {\n    const connecting: Player.Telemetry.Data.Connection.Connecting = {\n      name: 'connecting',\n      playerStreamerSid: '',\n      timestamp: Date.now(),\n      type: 'connection',\n    };\n    telemetry.publish(connecting);\n\n    try {\n      const {\n        playbackUrl,\n        streamerSid: playerStreamerSid,\n        requestCredentials,\n      } = getPlaybackGrant(token);\n      const connected: Player.Telemetry.Data.Connection.Connected = {\n        name: 'connected',\n        playerStreamerSid,\n        requestCredentials,\n        timestamp: Date.now(),\n        type: 'connection',\n      };\n      telemetry.publish(connected);\n      return new DerivedPlayer(playbackUrl, playerStreamerSid, { ...options, requestCredentials });\n    } catch (error) {\n      const connectionError: Player.Telemetry.Data.Connection.Error = {\n        name: 'error',\n        playerError: error,\n        playerStreamerSid: '',\n        timestamp: Date.now(),\n        type: 'connection',\n      };\n      telemetry.publish(connectionError);\n      throw error;\n    }\n  }\n\n  /**\n   * Set the SDK's log level.\n   */\n  static setLogLevel(level: Player.LogLevel): void {\n    logLevel = level;\n    const vendorPlayerLogLevel = level === Player.LogLevel.Off\n      ? Player.LogLevel.Error : level;\n    vendorPlayers.forEach(vendorPlayer =>\n      vendorPlayer.setLogLevel(vendorPlayerLogLevel));\n  }\n\n  protected readonly _playbackUrl: string;\n  protected readonly _streamerSid: string;\n  protected readonly _vendorPlayer: VendorPlayer;\n  private _disconnected: boolean;\n  private _liveLatencyEventObserver: LiveLatencyEventObserver;\n  private _playerPositionObserver: PlayerPositionObserver;\n  private _previousVideoSize: Player.VideoDimensions;\n  private readonly _stopRemittingVendorPlayerEvents: () => void;\n\n  protected constructor(\n    playbackUrl: string,\n    streamerSid: string,\n    createVendorPlayer: (config: VendorPlayerConfig) => VendorPlayer,\n    options: Player.Options) {\n    super();\n\n    const {\n      playerWasmAssetsPath,\n      rebufferToLive = true,\n      requestCredentials,\n      vendorPlayerVersion,\n    } = options;\n\n    const suffix = vendorPlayerVersion!.replace(/\\./g, '-');\n\n    this._disconnected = false;\n    this._playbackUrl = playbackUrl;\n    this._streamerSid = streamerSid;\n\n    this._vendorPlayer = createVendorPlayer({\n      wasmBinary: `${playerWasmAssetsPath}/twilio-live-player-wasmworker-${suffix}.min.wasm`,\n      wasmWorker: `${playerWasmAssetsPath}/twilio-live-player-wasmworker-${suffix}.min.js`,\n    });\n\n    // NOTE(mmalavalli): Configuring the default HTMLVideoElement for inline\n    // playback on iOS Safari.\n    const videoElement = this._vendorPlayer.getHTMLVideoElement();\n    videoElement.playsInline = true;\n\n    this._vendorPlayer.setLogLevel(Player.logLevel);\n    vendorPlayers.add(this._vendorPlayer);\n\n    this._vendorPlayer.setRebufferToLive(rebufferToLive);\n    this.videoElement.addEventListener('resize', this._onVideoSizeChanged);\n    this._previousVideoSize = { ...this.videoSize };\n    this._stopRemittingVendorPlayerEvents = this._reemitVendorPlayerEvents();\n\n    if (requestCredentials) {\n      this._vendorPlayer.setRequestCredentials(requestCredentials);\n    }\n    this._vendorPlayer.load(playbackUrl);\n\n    this._liveLatencyEventObserver = new LiveLatencyEventObserver(\n      this._vendorPlayer,\n      telemetry,\n      isHighLatencyReductionEnabled);\n\n    this._playerPositionObserver = new PlayerPositionObserver(\n      this._vendorPlayer,\n      telemetry);\n\n    this._playerPositionObserver.once(\n      PlayerPositionObserver.Event.PlayerPositionSame,\n      () => this._disconnect());\n\n    this._handleLiveLatencyEvents();\n  }\n\n  /**\n   * Array of available [[Quality]] objects from the loaded source, or empty if\n   * none are currently available. The qualities will be available after the\n   * [[Player]] transitions to the [[State.Ready]] state. Note that this set will\n   * contain only qualities capable of being played on the current device and not\n   * all those present in the source stream.\n   */\n  get availableQualities(): Player.Quality[] {\n    return this._vendorPlayer.getQualities().map(({ bitrate, codecs, height, name, width }) => ({\n      bitrate,\n      codecs,\n      height,\n      name,\n      width,\n    }));\n  }\n\n  /**\n   * The playback duration in seconds. The duration is `Infinity`\n   * if the media is a live stream. A [[Player.Event.DurationChanged]] is emitted\n   * whenever the playback duration changes.\n   */\n   get duration(): number {\n    return this._vendorPlayer.getDuration();\n  }\n\n  /**\n   * Whether the [[Player]] is muted. You can also mute the [[Player]] by setting\n   * it to true, or unmute by setting it to false. Updating this property has no\n   * effect once the [[Player]] transitions to the [[Player.State.Ended]] state.\n   */\n  get isMuted(): boolean {\n    return this._vendorPlayer.isMuted();\n  }\n\n  set isMuted(shouldMute: boolean) {\n    this._vendorPlayer.setMuted(shouldMute);\n    const playback: Player.Telemetry.Data.Playback = {\n      name: shouldMute ? 'muted' : 'unmuted',\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      type: 'playback',\n    };\n    telemetry.publish(playback);\n  }\n\n  /**\n   * For a live stream, the latency to the source in seconds.\n   */\n  get liveLatency(): number {\n    return this._vendorPlayer.getLiveLatency();\n  }\n\n  /**\n   * The playback position in seconds.\n   */\n  get position(): number {\n    return this._vendorPlayer.getPosition();\n  }\n\n  /**\n   * The current quality of the [[Player]]'s live stream. You\n   * can also change the quality of the live stream by setting\n   * a new [[Player.Quality]] from [[Player.availableQualities]].\n   * The [[Player]] will emit a [[Player.Event.QualityChanged]] event.\n   */\n  get quality(): Player.Quality {\n    const {\n      bitrate,\n      codecs,\n      height,\n      name,\n      width,\n    } = this._vendorPlayer.getQuality();\n\n    return {\n      bitrate,\n      codecs,\n      height,\n      name,\n      width,\n    };\n  }\n\n  set quality(newQuality: Player.Quality) {\n    const vendorPlayerQuality = this._vendorPlayer.getQualities().find(quality => {\n      return quality.name === newQuality.name;\n    });\n    if (vendorPlayerQuality) {\n      const oldQuality = this.quality;\n      this._vendorPlayer.setQuality(vendorPlayerQuality);\n      const qualitySet: Player.Telemetry.Data.PlaybackQuality.QualitySet = {\n        from: oldQuality,\n        name: 'quality-set',\n        playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n        playerPosition: this._vendorPlayer.getPosition(),\n        playerStreamerSid: this._streamerSid,\n        playerVolume: this._vendorPlayer.getVolume(),\n        timestamp: Date.now(),\n        to: newQuality,\n        type: 'playback-quality',\n      };\n      Player.telemetry.publish(qualitySet);\n    }\n  }\n\n  /**\n   * The [[Player]] state. Soon after a successful connection to a live stream,\n   * the [[Player]] is in the [[Player.State.Idle]] state while it is preparing\n   * the playback. Then it transitions to the [[Player.State.Ready]] state.\n   */\n  get state(): Player.State {\n    return this._disconnected ? Player.State.Ended : this._getState();\n  }\n\n  /**\n   * The media statistics of the [[Player]]'s live stream.\n   */\n  get stats(): Player.Stats {\n    return {\n      videoBitrate: this._vendorPlayer.getVideoBitRate() || 0,\n      videoFramesDecoded: this._vendorPlayer.getDecodedFrames() || 0,\n      videoFramesDropped: this._vendorPlayer.getDroppedFrames() || 0,\n    };\n  }\n\n  /**\n   * The SID of the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n   * which the [[Player]] is connected to.\n   */\n  get streamerSid(): string {\n    return this._streamerSid;\n  }\n\n  /**\n   * The HTMLVideoElement used to play back the live stream.\n   */\n  get videoElement(): HTMLVideoElement {\n    return this._vendorPlayer.getHTMLVideoElement();\n  }\n\n  /**\n   * The [[Player]]'s video size.\n   */\n  get videoSize(): Player.VideoDimensions {\n    const { videoHeight: height, videoWidth: width } = this.videoElement;\n    return { height, width };\n  }\n\n  /**\n   * The [[Player]]'s volume level in the range [0.0, 1.0].\n   */\n  get volume(): number {\n    return this._vendorPlayer.getVolume();\n  }\n\n  /**\n   * Set an HTMLVideoElement to play back the live stream. For iOS browsers,\n   * please enable inline playback before attaching the HTMLVideoElement.\n   * @example\n   * ```\n   * const videoElement = document.querySelector('div#container > video');\n   * videoElement.playsInline = true;\n   * player.attach(videoElement);\n   * ```\n   * @param videoElement The HTMLVideoElement to be used to play back the live stream\n   */\n  attach(videoElement: HTMLVideoElement): this {\n    this.videoElement.removeEventListener('resize', this._onVideoSizeChanged);\n    this._vendorPlayer.attachHTMLVideoElement(videoElement);\n    videoElement.addEventListener('resize', this._onVideoSizeChanged);\n    return this;\n  }\n\n  /**\n   * Disconnect from the live stream. The [[Player]] will transition to the terminal\n   * [[Player.State.Ended]] state, release all resources related to the playback of the\n   * live stream, and stop emitting events.\n   */\n  disconnect(): this {\n    if (!this._disconnect()) {\n      return this;\n    }\n    const disconnected: Player.Telemetry.Data.Connection.Disconnected = {\n      name: 'disconnected',\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      type: 'connection',\n    };\n    telemetry.publish(disconnected);\n    return this;\n  }\n\n  /**\n   * Pause the [[Player]]'s live stream. The [[Player]] transitions\n   * to the [[Player.State.Idle]] state.\n   */\n  pause(): this {\n    this._vendorPlayer.pause();\n    const paused: Player.Telemetry.Data.Playback.Paused = {\n      name: 'paused',\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      type: 'playback',\n    };\n    telemetry.publish(paused);\n    return this;\n  }\n\n  /**\n   * Start the playback of the [[Player]]'s live stream. The [[Player]]\n   * may transition to the [[Player.State.Buffering]] state if it is buffering\n   * media for playback, and will finally transition to the [[Player.State.Playing]]\n   * state.\n   *\n   * Calling this method before [[Player.state]] transitions to [[Player.State.Ready]]\n   * will not have any effect.\n   */\n  play(): this {\n    this._vendorPlayer.play();\n    const played: Player.Telemetry.Data.Playback.Played = {\n      name: 'played',\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      type: 'playback',\n    };\n    telemetry.publish(played);\n\n    return this;\n  }\n\n  /**\n   * Instruct the Player to seek to a specified time in the stream and begins\n   * playing media in that position. The player state might change to buffering\n   * if there is not enough buffered content in the specified position. This method is\n   * asynchronous and a [[Player.Event.SeekCompleted]] is emitted upon completion.\n   * This is only supported for recorded media and will emit a [[Player.Error]] if invoked on a live media.\n   * @throws [[Player.Error]]\n   * @param position\n   */\n  seekTo(position: number): this {\n    // NOTE(csantos): We only support seeking for VOD/Recorded media.\n    // A media is considered VOD (Video on Demand) if the playlist is tagged as VOD.\n    // If VOD tag exists, the player duration is Finite, otherwise Infinity.\n    const duration = this._vendorPlayer.getDuration();\n    const isVOD = typeof duration === 'number' && isFinite(duration) && duration > 0;\n    if (!isVOD) {\n      const error = new Player.Error.PlaybackNotSupportedError();\n      this._emitPlaybackError(error);\n      throw error;\n    }\n\n    if (position < 0 || position > this._vendorPlayer.getDuration() || typeof position !== 'number') {\n      const error = new Player.Error.PlaybackInvalidParameterError('position must be in the range [0, player.duration]');\n      this._emitPlaybackError(error);\n      throw error;\n    }\n\n    if (position === this._vendorPlayer.getDuration()) {\n      // NOTE(csantos): Move near the end to get the ended event\n      position = this._vendorPlayer.getDuration() - 1;\n    }\n\n    const currentPosition = this._vendorPlayer.getPosition();\n    this._vendorPlayer.seekTo(position);\n    const seekToData: Player.Telemetry.Data.Playback.SeekTo = {\n      from: currentPosition,\n      name: 'seek-to',\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      to: position,\n      type: 'playback',\n    };\n    telemetry.publish(seekToData);\n\n    return this;\n  }\n\n  /**\n   * Set the [[Player]]'s volume level in the range [0.0, 1.0]. The [[Player.volume]]\n   * property will be updated asynchronously and a [[Player.Event.VolumeChanged]] is emitted\n   * with the updated volume. A [[Player.Error]] will be emitted for any invalid parameters.\n   * @throws [[Player.Error]]\n   * @param level\n   */\n  setVolume(level: number): this {\n    if (level < 0 || level > 1 || typeof level !== 'number') {\n      const error = new Player.Error.PlaybackInvalidParameterError('Volume must be in the range [0, 1]');\n      this._emitPlaybackError(error);\n      throw error;\n    }\n    const previousLevel = this._vendorPlayer.getVolume();\n    this._vendorPlayer.setVolume(level);\n    const volumeSet: Player.Telemetry.Data.Playback.VolumeSet = {\n      from: previousLevel,\n      name: 'volume-set',\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      to: level,\n      type: 'playback',\n    };\n    telemetry.publish(volumeSet);\n    return this;\n  }\n\n  protected _disconnect(): boolean {\n    if (this._disconnected) {\n      return false;\n    }\n    this._disconnected = true;\n    this.emit(Player.Event.StateChanged, this.state);\n    this._release();\n    return true;\n  }\n\n  protected _emitPlaybackError(error: Player.Error): this {\n    this.emit(Player.Event.Error, error);\n    const playbackError: Player.Telemetry.Data.Playback.Error = {\n      name: 'error',\n      playerError: error,\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerState: this._getState(),\n      playerStreamerSid: this._streamerSid,\n      timestamp: Date.now(),\n      type: 'playback',\n    };\n    telemetry.publish(playbackError);\n\n    return this;\n  }\n\n  protected abstract _getState(): Player.State;\n  protected abstract _reemitVendorPlayerEvents(): () => void;\n\n  protected _release(): this {\n    this._liveLatencyEventObserver.release();\n    this._playerPositionObserver.release();\n    this.videoElement.removeEventListener('resize', this._onVideoSizeChanged);\n    this._stopRemittingVendorPlayerEvents();\n    this._vendorPlayer.delete();\n    vendorPlayers.delete(this._vendorPlayer);\n    return this;\n  }\n\n  private _handleLiveLatencyEvents(): void {\n    const getData = (name: string) => ({\n      name,\n      playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerStreamerSid: this._streamerSid,\n      playerVolume: this._vendorPlayer.getVolume(),\n      timestamp: Date.now(),\n      type: 'playback-quality',\n    });\n\n    this._liveLatencyEventObserver.on(\n      LiveLatencyEventObserver.Event.HighLatencyReductionReverted,\n      () => telemetry.publish(getData('high-latency-reduction-reverted')));\n\n    this._liveLatencyEventObserver.on(\n      LiveLatencyEventObserver.Event.IncreasePlaybackRate,\n      () => telemetry.publish(getData('increase-playback-rate')));\n\n    this._liveLatencyEventObserver.on(\n      LiveLatencyEventObserver.Event.SeekAhead,\n      () => telemetry.publish(getData('seek-ahead')));\n  }\n\n  private _onVideoSizeChanged = () => {\n    this.emit(Player.Event.VideoSizeChanged, this.videoSize);\n    const videoSizeChanged: Player.Telemetry.Data.PlaybackQuality.VideoSizeChanged = {\n      from: this._previousVideoSize,\n      name: 'video-size-changed',\n      playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerStreamerSid: this._streamerSid,\n      playerVolume: this._vendorPlayer.getVolume(),\n      timestamp: Date.now(),\n      to: this.videoSize,\n      type: 'playback-quality',\n    };\n    telemetry.publish(videoSizeChanged);\n    this._previousVideoSize = { ...this.videoSize };\n  }\n}\n\nexport namespace Player {\n  /**\n   * Description of an error that was encountered while connecting to\n   * or playing back a live stream.\n   */\n  export import Error = PlayerError;\n\n  /**\n   * [[Player]] events.\n   */\n  export enum Event {\n    /**\n     * The [[Player.duration]] property has changed.\n     */\n    DurationChanged = 'durationChanged',\n\n    /**\n     * The [[Player]] encountered an error while playing back the live stream.\n     * The playback is stopped and the [[Player]] transitions to the [[Player.State.Ended]]\n     * state.\n     */\n    Error = 'error',\n\n    /**\n     * The [[Player]]'s playback quality changed.\n     */\n    QualityChanged = 'qualityChanged',\n\n    /**\n     * The [[Player]] is rebuffering from a previous [[State.Playing]] state.\n     */\n    Rebuffering = 'rebuffering',\n\n    /**\n     * The player seeked to a given position (as requested by [[Player.seekTo]]).\n     */\n    SeekCompleted = 'seekCompleted',\n\n    /**\n     * The [[Player]]'s state changed.\n     */\n    StateChanged = 'stateChanged',\n\n    /**\n     * The [[Player]] received a [[TimedMetadata]] in the live stream.\n     */\n    TimedMetadataReceived = 'timedMetadataReceived',\n\n    /**\n     * The [[Player]]'s video size changed.\n     */\n    VideoSizeChanged = 'videoSizeChanged',\n\n    /**\n     * The [[Player]]'s volume level changed.\n     */\n    VolumeChanged = 'volumeChanged',\n  }\n\n  /**\n   * Available log levels for the [[Player]].\n   */\n  export enum LogLevel {\n    Debug = 'debug',\n    Error = 'error',\n    Info = 'info',\n    Off = 'off',\n    Warn = 'warn',\n  }\n\n  /**\n   * [[Player]] options.\n   */\n  export interface Options {\n    /**\n     * Absolute path of the hosted \"twilio-live-player-wasmworker-x-y-z.min.js\"\n     * and \"twilio-live-player-wasmworker-x-y-z.min.wasm\" files, where x.y.z is\n     * the version of the files.\n     */\n    playerWasmAssetsPath: string;\n\n    /**\n     * @private\n     */\n    rebufferToLive?: boolean;\n\n    /**\n     * @private\n     */\n    requestCredentials?: RequestCredentials;\n\n    /**\n     * @private\n     */\n    vendorPlayerVersion?: string;\n  }\n\n  /**\n   * The quality statistics of a [[Player]]'s live stream.\n   */\n  export interface Quality {\n    /**\n     * The bitrate of the live stream in bits per second (bps).\n     */\n    bitrate: number;\n\n    /**\n     * The codec string, both for audio and video tracks.\n     * Example: \"avc1.64002A,mp4a.40.2\".\n     */\n    codecs: string;\n\n    /**\n     * The height of the video frames. It is set to 0 if unknown or not\n     * applicable.\n     */\n    height: number;\n\n    /**\n     * The name of the [[Quality]] object.\n     */\n    name: string;\n\n    /**\n     * The width of the video frames. It is set to 0 if unknown or not\n     * applicable.\n     */\n    width: number;\n  }\n\n  /**\n   * [[Player]] states.\n   */\n  export enum State {\n    /**\n     * The [[Player]] is buffering.\n     */\n    Buffering = 'buffering',\n\n    /**\n     * The [[Player]] has ended the playback of the live stream.\n     */\n    Ended = 'ended',\n\n    /**\n     * The [[Player]] is idle.\n     */\n    Idle = 'idle',\n\n    /**\n     * The [[Player]] is playing back the live stream.\n     */\n    Playing = 'playing',\n\n    /**\n     * The [[Player]] is ready to play back the live stream.\n     */\n    Ready = 'ready',\n  }\n\n  /**\n   * The statistics of the [[Player]]'s live stream.\n   */\n  export interface Stats {\n    /**\n     * The bitrate of the video stream in bits per second (bps).\n     */\n    videoBitrate: number;\n\n    /**\n     * The number of video frames decoded.\n     */\n    videoFramesDecoded: number;\n\n    /**\n     * The number of video frames dropped.\n     */\n    videoFramesDropped: number;\n  }\n\n  /**\n   * A [[Telemetry]] provides facilities for subscribing to event\n   * and metric data published by the SDK.\n   */\n  export import Telemetry = TelemetryExports.Telemetry;\n\n  /**\n   * Timed metadata that is sent to the [[Player]] by the live stream source.\n   */\n  export interface TimedMetadata {\n    /**\n     * The metadata string.\n     */\n    metadata: string;\n\n    /**\n     * The time when the metadata should be displayed.\n     */\n    time: number;\n  }\n\n  /**\n   * Representation of the [[Player]]'s video size.\n   */\n  export interface VideoDimensions {\n    /**\n     * Height of the video in pixels.\n     */\n    height: number;\n\n    /**\n     * Width of the video in pixels.\n     */\n    width: number;\n  }\n}\n\n// NOTE(mmalavalli): This represents the current log level of the SDK\n// and is accessed by Player.logLevel and set by Player.setLogLevel().\nlet logLevel = Player.LogLevel.Error;\n\n// NOTE(mmalavalli): This contains the VendorPlayer instances created so\n// far. Whenever Player.logLevel is updated, the log levels of the VendorPlayer\n// instances are updated as well.\nconst vendorPlayers = new Set<VendorPlayer>();\n"]}