{"version":3,"file":"playerposition.js","sourceRoot":"","sources":["../../lib/eventobservers/playerposition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,iCAAsC;AAGtC,IAAM,0BAA0B,GAAG,CAAC,CAAC;AAErC;;;;;;;GAOG;AACH;IAA4C,0CAAY;IAKtD;;OAEG;IACH,gCAAY,YAA0B,EAAE,SAA2B;QAAnE,YACE,iBAAO,SAUR;QAMO,gBAAU,GAAG,UAAC,IAA2B;YAC/C,IAAM,OAAO,GAAG,IAAqD,CAAC;YACtE,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACnD,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,0BAA0B,CAAC,CAAC,CAAC;YACnG,IAAI,KAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,0BAA0B;mBAC1D,IAAI,GAAG,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;gBAC9C,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC7C,KAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;aAC5D;QACH,CAAC,CAAA;QAxBC,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,EAAE,UAAC,EAAc;gBAAZ,IAAI,UAAA,EAAE,IAAI,UAAA;YACtD,OAAO,IAAI,KAAK,kBAAkB;mBAC7B,IAAI,KAAK,SAAS;mBAClB,KAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC;QACnD,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,wCAAO,GAAP;QACE,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IAC3E,CAAC;IAYH,6BAAC;AAAD,CAAC,AAnCD,CAA4C,qBAAY,GAmCvD;AAnCY,wDAAsB;AAqCnC;;GAEG;AACH,WAAiB,sBAAsB;IACrC;;OAEG;IACH,IAAY,KAEX;IAFD,WAAY,KAAK;QACf,oDAA2C,CAAA;IAC7C,CAAC,EAFW,KAAK,GAAL,4BAAK,KAAL,4BAAK,QAEhB;AACH,CAAC,EAPgB,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAOtC;AA/CY,wDAAsB","sourcesContent":["import { EventEmitter } from 'events';\nimport { Player, VendorPlayer } from '../player';\n\nconst PLAYER_POSITION_SAME_COUNT = 3;\n\n/**\n * [[PlayerPositionObserver]] monitors the [[Player]]'s position while it is\n * in the [[Player.State.Playing]] state, and raises an event if it is the same\n * for the last PLAYER_POSITION_SAME_COUNT continuous samples. This is required\n * when running in Firefox because the [[Player]] does not transition to the\n * [[Player.State.Ended]] state after the MediaProcessor is ended.\n * @private\n */\nexport class PlayerPositionObserver extends EventEmitter {\n  private _playerPositions: number[];\n  private _telemetry: Player.Telemetry;\n  private _vendorPlayer: VendorPlayer;\n\n  /**\n   * @private\n   */\n  constructor(vendorPlayer: VendorPlayer, telemetry: Player.Telemetry) {\n    super();\n    this._playerPositions = [];\n    this._telemetry = telemetry;\n    this._vendorPlayer = vendorPlayer;\n\n    this._telemetry.subscribe(this._onSummary, ({ name, type }) => {\n      return type === 'playback-quality'\n        && name === 'summary'\n        && this._vendorPlayer.getState() === 'Playing';\n    });\n  }\n\n  release() {\n    this.removeAllListeners(PlayerPositionObserver.Event.PlayerPositionSame);\n  }\n\n  private _onSummary = (data: Player.Telemetry.Data): void => {\n    const summary = data as Player.Telemetry.Data.PlaybackQuality.Summary;\n    this._playerPositions.push(summary.playerPosition);\n    this._playerPositions.splice(0, Number(this._playerPositions.length > PLAYER_POSITION_SAME_COUNT));\n    if (this._playerPositions.length === PLAYER_POSITION_SAME_COUNT\n      && new Set(this._playerPositions).size === 1) {\n      this._telemetry.unsubscribe(this._onSummary);\n      this.emit(PlayerPositionObserver.Event.PlayerPositionSame);\n    }\n  }\n}\n\n/**\n * @private\n */\nexport namespace PlayerPositionObserver {\n  /**\n   * @private\n   */\n  export enum Event {\n    PlayerPositionSame = 'player-position-same',\n  }\n}\n"]}