{"version":3,"file":"playbackurl.js","sourceRoot":"","sources":["../../lib/eventobservers/playbackurl.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { exponential as exponentialBackoff, Backoff } from 'backoff';\nimport { ErrorType, PlayerError, PlayerEventType, PlayerState } from 'amazon-ivs-player';\nimport { VendorPlayer } from '../player';\n\nconst BACKOFF_TIMEOUT_MS = 16000;\n\nconst BACKOFF_CONFIG = {\n  factor: 1.50,\n  initialDelay: 1000,\n  maxDelay: 8000,\n  randomisationFactor: 0.5,\n};\n\nconst RETRYABLE_ERRORS: { [key: number]: ErrorType } = {\n  404: ErrorType.NOT_AVAILABLE\n};\n\n/**\n * [[PlaybackUrlEventObserver]] listens to the vendor player errors after loading the playback url.\n * The observer will then re-emit the events or retry loading the playback url base on the retry policy.\n * @private\n */\nexport class PlaybackUrlEventObserver extends EventEmitter {\n\n  private _playbackUrl: string;\n  private _startTime?: number;\n  private _timer: Backoff | null;\n  private _vendorPlayer: VendorPlayer;\n\n  constructor(\n    vendorPlayer: VendorPlayer,\n    playbackUrl: string,\n    options?: { exponentialBackoff?: () => Backoff }) {\n\n    super();\n    options = options || {};\n\n    this._playbackUrl = playbackUrl;\n    this._vendorPlayer = vendorPlayer;\n    this._vendorPlayer.addEventListener(PlayerEventType.ERROR, this._onError);\n    this._vendorPlayer.addEventListener(PlayerState.READY, this._timerDone);\n\n    this._timer = (options.exponentialBackoff || exponentialBackoff)(BACKOFF_CONFIG);\n    this._timer.on('ready', this._onRetry);\n  }\n\n  release(): void {\n    this._clearTimer();\n    this.removeAllListeners(PlayerEventType.ERROR);\n    this._vendorPlayer.removeEventListener(PlayerState.READY, this._timerDone);\n    this._vendorPlayer.removeEventListener(PlayerEventType.ERROR, this._onError);\n  }\n\n  private _clearTimer() {\n    if (this._timer) {\n      this._timer.reset();\n      this._timer.removeAllListeners('ready');\n      this._timer = null;\n    }\n  }\n\n  private _onError = (error: PlayerError) => {\n    const type = RETRYABLE_ERRORS[error.code];\n    const isRetryable = !!this._timer && !!type && type === error.type;\n    const hasTimedOut = !!this._startTime && Date.now() - this._startTime >= BACKOFF_TIMEOUT_MS;\n\n    if (isRetryable && hasTimedOut) {\n      this._timerDone();\n      this.emit(PlayerEventType.ERROR, error);\n      return;\n    }\n\n    if (isRetryable) {\n      if (!this._startTime) {\n        this._startTime = Date.now();\n      }\n      this._timer!.backoff();\n      return;\n    }\n    // Not retryable. We bubble up.\n    this.emit(PlayerEventType.ERROR, error);\n  }\n\n  private _onRetry = () => {\n    this._vendorPlayer.load(this._playbackUrl);\n  }\n\n  private _timerDone = () => {\n    this._clearTimer();\n    this._vendorPlayer.removeEventListener(PlayerState.READY, this._timerDone);\n  }\n}\n"]}