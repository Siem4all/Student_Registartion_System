{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../lib/telemetry.ts"],"names":[],"mappings":";;;AAIA;;;GAGG;AACH;IAGE;;OAEG;IACH;QACE,IAAI,CAAC,wBAAwB,GAAG,IAAI,GAAG,EAGpC,CAAC;IACN,CAAC;IAED;;OAEG;IACH,2BAAO,GAAP,UAAQ,IAAoB;QAC1B,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,UAAU;YAC1D,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,UAAU,CAAC,IAAI,CAAC,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,uCAAmB,GAAnB,UAAoB,OAA6B,EAAE,QAAgB;QAAnE,iBAiBC;QAbC,IAAM,IAAI,GAAG;YACX,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACrB,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACxB,QAAQ,GAAG,IAAI,CAAC;aACjB;QACH,CAAC,CAAC;QACF,IAAM,KAAK,GAAG;YACZ,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACrB,QAAQ,GAAG,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAvB,CAAuB,EAAE,QAAQ,CAAC,CAAC;aACjE;QACH,CAAC,CAAC;QACF,IAAI,QAAQ,GAA0B,IAAI,CAAC;QAC3C,OAAO,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACH,6BAAS,GAAT,UAAU,UAAgC,EAAE,SAA+B;QACzE,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,+BAAW,GAAX,UAAY,UAAgC;QAC1C,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IACH,gBAAC;AAAD,CAAC,AAnED,IAmEC;AAnEY,8BAAS","sourcesContent":["import { Player } from './player';\nimport { Error as PlayerError } from './error';\nimport { RequestCredentials } from './types';\n\n/**\n * A [[Telemetry]] provides facilities for subscribing to event\n * and metric data collected by the SDK.\n */\nexport class Telemetry {\n  private readonly _subscribersToPredicates: Map<Telemetry.Subscriber, Telemetry.Predicate>;\n\n  /**\n   * @private\n   */\n  constructor() {\n    this._subscribersToPredicates = new Map<\n      Telemetry.Subscriber,\n      Telemetry.Predicate\n    >();\n  }\n\n  /**\n   * @private\n   */\n  publish(data: Telemetry.Data): this {\n    this._subscribersToPredicates.forEach((predicate, subscriber) => {\n      if (predicate(data)) {\n        subscriber(data);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  publishPeriodically(getData: () => Telemetry.Data, periodMs: number): {\n    start: () => void;\n    stop: () => void;\n  } {\n    const stop = () => {\n      if (interval !== null) {\n        clearInterval(interval);\n        interval = null;\n      }\n    };\n    const start = () => {\n      if (interval === null) {\n        interval = setInterval(() => this.publish(getData()), periodMs);\n      }\n    };\n    let interval: NodeJS.Timeout | null = null;\n    return { start, stop };\n  }\n\n  /**\n   * Subscribe to the published [[Telemetry.Data]] objects that satisfy the given\n   * [[Telemetry.Predicate]]. If no [[Telemetry.Predicate]] is provided, all\n   * [[Telemetry.Data]] objects will be subscribed to.\n   * @param subscriber Consumer of the published [[Telemetry.Data]] objects\n   * @param predicate The filter applied to the published [[Telemetry.Data]] objects\n   */\n  subscribe(subscriber: Telemetry.Subscriber, predicate?: Telemetry.Predicate): this {\n    this._subscribersToPredicates.set(subscriber, predicate || (() => true));\n    return this;\n  }\n\n  /**\n   * Unsubscribe from the [[Telemetry.Data]] objects.\n   * @param subscriber Consumer of the published [[Telemetry.Data]] objects\n   */\n  unsubscribe(subscriber: Telemetry.Subscriber): this {\n    this._subscribersToPredicates.delete(subscriber);\n    return this;\n  }\n}\n\nexport namespace Telemetry {\n  /**\n   * The common properties in all [[Telemetry]] data reported by the SDK.\n   */\n  export interface Data {\n    /**\n     * The name of the [[Telemetry]] data.\n     */\n    name: string;\n\n    /**\n     * The time when the data was reported.\n     */\n    timestamp: number;\n\n    /**\n     * The type of the [[Telemetry]] data.\n     */\n    type: string;\n  }\n\n  export namespace Data {\n    /**\n     * A type of [[Telemetry]] data pertaining to the SDK's connection to\n     * a live stream.\n     */\n    export interface Connection extends Data {\n      /**\n       * The SID associated with the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n       * to which the [[Player]] reporting the data is connected. It is set\n       * to empty if the [[Player]] is not connected to the PlayerStreamer.\n       */\n      playerStreamerSid: string;\n\n      /**\n       * The type is set to \"connection\".\n       */\n      type: 'connection';\n    }\n\n    export namespace Connection {\n      /**\n       * [[Telemetry]] data indicating that a [[Player]] has connected\n       * to a live stream.\n       */\n      export interface Connected extends Connection {\n        /**\n         * The name is set to \"connected\".\n         */\n        name: 'connected';\n\n        /**\n         * Indicates what cross-origin request policy was used for cross-site\n         * cookies during media playback.\n         */\n        requestCredentials?: RequestCredentials;\n      }\n\n      /**\n       * [[Telemetry]] data indicating that a [[Player]] is connecting\n       * to a live stream.\n       */\n      export interface Connecting extends Connection {\n        /**\n         * The name is set to \"connecting\".\n         */\n        name: 'connecting';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that a [[Player]] has disconnected\n       * from a live stream.\n       */\n      export interface Disconnected extends Connection {\n        /**\n         * The name is set to \"disconnected\".\n         */\n        name: 'disconnected';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that a [[Player]] experienced an error\n       * while connecting to a live stream.\n       */\n      export interface Error extends Connection {\n        /**\n         * The name is set to \"error\".\n         */\n        name: 'error';\n\n        /**\n         * The [[Player.Error]] describing the error.\n         */\n        playerError: PlayerError;\n      }\n    }\n\n    /**\n     * [[Telemetry]] data pertaining to media playback.\n     */\n    export interface Playback extends Data {\n      /**\n       * The [[Player]] position at the time the data was reported.\n       */\n      playerPosition: number;\n\n      /**\n       * The [[Player]]'s state at the time the data was reported.\n       */\n      playerState: Player.State;\n\n      /**\n       * The SID associated with the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n       * to which the [[Player]] is connected.\n       */\n      playerStreamerSid: string;\n\n      /**\n       * The type is set to \"playback\".\n       */\n      type: 'playback';\n    }\n\n    export namespace Playback {\n      /**\n       * [[Telemetry]] data indicating that a [[Player]] experienced an error\n       * while playing back a live stream.\n       */\n      export interface Error extends Playback {\n        /**\n         * The name is set to \"error\".\n         */\n        name: 'error';\n\n        /**\n         * The [[Player.Error]] describing the error.\n         */\n        playerError: PlayerError;\n      }\n\n      /**\n       * [[Telemetry]] data indicated that the player has been muted.\n       */\n      export interface Muted extends Playback {\n        /**\n         * The name is set to \"muted\".\n         */\n        name: 'muted';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the Player has been paused.\n       */\n      export interface Paused extends Playback {\n        /**\n         * The name is set to \"played\".\n         */\n        name: 'paused';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the Player has been played.\n       */\n      export interface Played extends Playback {\n        /**\n         * The name is set to \"played\".\n         */\n        name: 'played';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the Player is rebuffering.\n       */\n      export interface Rebuffering extends Playback {\n        /**\n         * The name is set to \"rebuffering\".\n         */\n        name: 'rebuffering';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]\n       * seeked to a given position (as requested by [[Player.seekTo]]).\n       */\n      export interface SeekCompleted extends Playback {\n        /**\n         * The name is set to \"seek-completed\".\n         */\n        name: 'seek-completed';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the Player started seeking to a specified position.\n       */\n      export interface SeekTo extends Playback {\n        /**\n         * The previous position of the [[Player]].\n         */\n        from: number;\n\n        /**\n         * The name is set to \"seek-to\".\n         */\n        name: 'seek-to';\n\n        /**\n         * The current position of the [[Player]].\n         */\n        to: number;\n      }\n\n      /**\n       * [[Telemetry]] data indicated that the player has been unmuted.\n       */\n      export interface Unmuted extends Playback {\n        /**\n         * The name is set to \"unmuted\".\n         */\n        name: 'unmuted';\n      }\n\n      export interface VolumeSet extends Playback {\n        /**\n         * The previous volume of the [[Player]].\n         */\n        from: number;\n\n        /**\n         * The name is set to \"volume-set\".\n         */\n        name: 'volume-set';\n\n        /**\n         * The current volume of the [[Player]].\n         */\n        to: number;\n      }\n    }\n\n    export interface PlaybackQuality extends Data {\n      /**\n       * The [[Player]] live latency (in seconds) at the time the data was reported.\n       */\n      playerLiveLatency: number;\n\n      /**\n       * The [[Player]] position at the time the data was reported.\n       */\n      playerPosition: number;\n\n      /**\n       * The SID associated with the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n       * to which the [[Player]] is connected.\n       */\n      playerStreamerSid: string;\n\n      /**\n       * The [[Player]]'s volume at the time the data was reported.\n       */\n      playerVolume: number;\n\n      /**\n       * The type is set to \"playback-quality\".\n       */\n      type: 'playback-quality';\n    }\n\n    export namespace PlaybackQuality {\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]'s\n       * [[Player.duration]] changed.\n       */\n      export interface DurationChanged extends PlaybackQuality {\n        /**\n         * The previous [[Player.duration]].\n         */\n        from: number;\n\n        /**\n         * The name is set to \"duration-changed\".\n         */\n        name: 'duration-changed';\n\n        /**\n         * The current [[Player.duration]].\n         */\n        to: number;\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]\n       * applied a high latency reduction strategy.\n       */\n      export interface HighLatencyReductionApplied extends PlaybackQuality {\n        /**\n         * The name of the high latency reduction technique applied.\n         */\n        name: 'increase-playback-rate' | 'seek-ahead';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]\n       * has reverted all high latency reduction strategies.\n       */\n      export interface HighLatencyReductionReverted extends PlaybackQuality {\n        /**\n         * The name is set to \"high-latency-reduction-reverted\"\n         */\n        name: 'high-latency-reduction-reverted';\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]'s\n       * [[Player.Quality]] changed.\n       */\n      export interface QualityChanged extends PlaybackQuality {\n        /**\n         * The previous [[Player.Quality]].\n         */\n        from: Player.Quality;\n\n        /**\n         * The name is set to \"quality-changed\".\n         */\n        name: 'quality-changed';\n\n        /**\n         * The current [[Player.Quality]].\n         */\n        to: Player.Quality;\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the [[Player]]'s\n       * [[Player.Quality]] has been set.\n       */\n      export interface QualitySet extends PlaybackQuality {\n        /**\n         * The previous [[Player.Quality]].\n         */\n        from: Player.Quality;\n\n        /**\n         * The name is set to \"quality-set\".\n         */\n        name: 'quality-set';\n\n        /**\n         * The current [[Player.Quality]].\n         */\n        to: Player.Quality;\n      }\n\n      /**\n       * [[Telemetry]] data summarizing the quality metrics of the\n       * live stream playback. It is reported every three seconds\n       * while the [[Player]] is in either the [[Player.State.Playing]]\n       * or [[Player.State.Buffering]] states.\n       */\n      export interface Summary extends PlaybackQuality {\n        /**\n         * The name is set to \"summary\".\n         */\n        name: 'summary';\n\n        /**\n         * The snapshot of the [[Player]] stats at the time the data\n         * was reported.\n         */\n        playerStats: Player.Stats;\n      }\n\n      /**\n       * [[Telemetry]] data indicating that the live stream's playback\n       * video dimensions changed.\n       */\n      export interface VideoSizeChanged extends PlaybackQuality {\n        /**\n         * The previous video dimensions.\n         */\n        from: Player.VideoDimensions;\n\n        /**\n         * The name is set to \"video-size-changed\".\n         */\n        name: 'video-size-changed';\n\n        /**\n         * The current video dimensions.\n         */\n        to: Player.VideoDimensions;\n      }\n    }\n\n    /**\n     * [[Telemetry]] data pertaining to the media playback state.\n     */\n    export interface PlaybackState extends Data {\n      /**\n       * The SID associated with the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n       * to which the [[Player]] is connected.\n       */\n      playerStreamerSid: string;\n\n      /**\n       * The type is set to \"playback-state\".\n       */\n      type: 'playback-state';\n    }\n\n    export namespace PlaybackState {\n      /**\n       * [[Telemetry]] data indicating the [[Player]]'s state changed.\n       */\n      export interface Changed extends PlaybackState {\n        /**\n         * The previous [[Player]] state.\n         */\n        from: Player.State;\n\n        /**\n         * The name is set to \"changed\".\n         */\n        name: 'changed';\n\n        /**\n         * The current [[Player]] state.\n         */\n        to: Player.State;\n      }\n    }\n\n    /**\n     * [[Telemetry]] data pertaining to [[Player.TimedMetadata]].\n     */\n    export interface TimedMetadataTelemetry extends Data {\n      /**\n       * The SID associated with the [PlayerStreamer](https://www.twilio.com/docs/live/playerstreamers)\n       * to which the [[Player]] is connected.\n       */\n      playerStreamerSid: string;\n\n      /**\n       * The type is set to \"timed-metadata\".\n       */\n      type: 'timed-metadata';\n    }\n\n    export namespace TimedMetadataTelemetry {\n      /**\n       * [[Telemetry]] data indicating that a [[Player.TimedMetadata]] was received.\n       */\n      export interface Received extends TimedMetadataTelemetry {\n        /**\n         * The name is set to \"received\".\n         */\n        name: 'received';\n\n        /**\n         * The time in the stream that the [[Player.TimedMetadata]] was inserted.\n         */\n        timedMetadataTime: number;\n      }\n    }\n  }\n\n  /**\n   * A callback that determines if a published [[Data]] object should be\n   * consumed by a [[Subscriber]].\n   */\n  export type Predicate = (data: Data) => boolean;\n\n  /**\n   * A callback that consumes published [[Data]] objects.\n   */\n  export type Subscriber = (data: Data) => void;\n}\n"]}