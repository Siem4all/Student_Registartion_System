"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createError = exports.Error = void 0;
// NOTE: Do not edit this file. This code is auto-generated. Contact the
// Twilio SDK Team for more information.
/* tslint:disable:max-classes-per-file */
var globalScope = global.window || global;
/**
 * Description of an error that was encountered while connecting to
 * or playing back a live stream.
 */
var Error = /** @class */ (function (_super) {
    __extends(Error, _super);
    /**
     * @private
     */
    function Error(code, message, explanation) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, Error.prototype);
        _this._code = code;
        _this._explanation = explanation;
        _this._message = message;
        return _this;
    }
    Object.defineProperty(Error.prototype, "code", {
        /**
         * A code representing the error.
         */
        get: function () {
            return this._code;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Error.prototype, "explanation", {
        /**
         * A message providing more details about the error.
         */
        get: function () {
            return this._explanation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Error.prototype, "message", {
        /**
         * A message describing the error.
         */
        get: function () {
            return this._message;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @private
     */
    Error.prototype.toJSON = function () {
        var json = {
            code: this._code,
            message: this._message,
        };
        if (this._explanation) {
            json.explanation = this._explanation;
        }
        return json;
    };
    return Error;
}(globalScope.Error));
exports.Error = Error;
(function (Error) {
    /**
     * Twilio was unable to validate your Access Token
     */
    var AccessTokenInvalidError = /** @class */ (function (_super) {
        __extends(AccessTokenInvalidError, _super);
        /**
         * @private
         */
        function AccessTokenInvalidError(explanation) {
            return _super.call(this, 20101, 'Twilio was unable to validate your Access Token', explanation) || this;
        }
        return AccessTokenInvalidError;
    }(Error));
    Error.AccessTokenInvalidError = AccessTokenInvalidError;
    /**
     * An error occurred playing back media content
     */
    var PlaybackMediaError = /** @class */ (function (_super) {
        __extends(PlaybackMediaError, _super);
        /**
         * @private
         */
        function PlaybackMediaError(explanation) {
            return _super.call(this, 56000, 'An error occurred playing back media content', explanation) || this;
        }
        return PlaybackMediaError;
    }(Error));
    Error.PlaybackMediaError = PlaybackMediaError;
    /**
     * A network resource is not authorized
     */
    var PlaybackAuthorizationError = /** @class */ (function (_super) {
        __extends(PlaybackAuthorizationError, _super);
        /**
         * @private
         */
        function PlaybackAuthorizationError(explanation) {
            return _super.call(this, 56001, 'A network resource is not authorized', explanation) || this;
        }
        return PlaybackAuthorizationError;
    }(Error));
    Error.PlaybackAuthorizationError = PlaybackAuthorizationError;
    /**
     * Data or input is invalid
     */
    var PlaybackInvalidDataError = /** @class */ (function (_super) {
        __extends(PlaybackInvalidDataError, _super);
        /**
         * @private
         */
        function PlaybackInvalidDataError(explanation) {
            return _super.call(this, 56002, 'Data or input is invalid', explanation) || this;
        }
        return PlaybackInvalidDataError;
    }(Error));
    Error.PlaybackInvalidDataError = PlaybackInvalidDataError;
    /**
     * A method parameter is invalid
     */
    var PlaybackInvalidParameterError = /** @class */ (function (_super) {
        __extends(PlaybackInvalidParameterError, _super);
        /**
         * @private
         */
        function PlaybackInvalidParameterError(explanation) {
            return _super.call(this, 56003, 'A method parameter is invalid', explanation) || this;
        }
        return PlaybackInvalidParameterError;
    }(Error));
    Error.PlaybackInvalidParameterError = PlaybackInvalidParameterError;
    /**
     * The Player or an internal object is in an invalid state
     */
    var PlaybackInvalidStateError = /** @class */ (function (_super) {
        __extends(PlaybackInvalidStateError, _super);
        /**
         * @private
         */
        function PlaybackInvalidStateError(explanation) {
            return _super.call(this, 56004, 'The Player or an internal object is in an invalid state', explanation) || this;
        }
        return PlaybackInvalidStateError;
    }(Error));
    Error.PlaybackInvalidStateError = PlaybackInvalidStateError;
    /**
     * A network error occurred
     */
    var PlaybackNetworkError = /** @class */ (function (_super) {
        __extends(PlaybackNetworkError, _super);
        /**
         * @private
         */
        function PlaybackNetworkError(explanation) {
            return _super.call(this, 56005, 'A network error occurred', explanation) || this;
        }
        return PlaybackNetworkError;
    }(Error));
    Error.PlaybackNetworkError = PlaybackNetworkError;
    /**
     * A network I/O error occurred
     */
    var PlaybackNetworkIOError = /** @class */ (function (_super) {
        __extends(PlaybackNetworkIOError, _super);
        /**
         * @private
         */
        function PlaybackNetworkIOError(explanation) {
            return _super.call(this, 56006, 'A network I/O error occurred', explanation) || this;
        }
        return PlaybackNetworkIOError;
    }(Error));
    Error.PlaybackNetworkIOError = PlaybackNetworkIOError;
    /**
     * The stream is not available
     */
    var PlaybackStreamNotAvailableError = /** @class */ (function (_super) {
        __extends(PlaybackStreamNotAvailableError, _super);
        /**
         * @private
         */
        function PlaybackStreamNotAvailableError(explanation) {
            return _super.call(this, 56007, 'The stream is not available', explanation) || this;
        }
        return PlaybackStreamNotAvailableError;
    }(Error));
    Error.PlaybackStreamNotAvailableError = PlaybackStreamNotAvailableError;
    /**
     * The current-viewers limit was reached
     */
    var PlaybackTooManyStreamingRequestsError = /** @class */ (function (_super) {
        __extends(PlaybackTooManyStreamingRequestsError, _super);
        /**
         * @private
         */
        function PlaybackTooManyStreamingRequestsError(explanation) {
            return _super.call(this, 56008, 'The current-viewers limit was reached', explanation) || this;
        }
        return PlaybackTooManyStreamingRequestsError;
    }(Error));
    Error.PlaybackTooManyStreamingRequestsError = PlaybackTooManyStreamingRequestsError;
    /**
     * A method or feature is not supported
     */
    var PlaybackNotSupportedError = /** @class */ (function (_super) {
        __extends(PlaybackNotSupportedError, _super);
        /**
         * @private
         */
        function PlaybackNotSupportedError(explanation) {
            return _super.call(this, 56009, 'A method or feature is not supported', explanation) || this;
        }
        return PlaybackNotSupportedError;
    }(Error));
    Error.PlaybackNotSupportedError = PlaybackNotSupportedError;
    /**
     * There is no source for the Player to play
     */
    var PlaybackNoSourceError = /** @class */ (function (_super) {
        __extends(PlaybackNoSourceError, _super);
        /**
         * @private
         */
        function PlaybackNoSourceError(explanation) {
            return _super.call(this, 56010, 'There is no source for the Player to play', explanation) || this;
        }
        return PlaybackNoSourceError;
    }(Error));
    Error.PlaybackNoSourceError = PlaybackNoSourceError;
    /**
     * The Player timed out performing an operation
     */
    var PlaybackTimeoutError = /** @class */ (function (_super) {
        __extends(PlaybackTimeoutError, _super);
        /**
         * @private
         */
        function PlaybackTimeoutError(explanation) {
            return _super.call(this, 56011, 'The Player timed out performing an operation', explanation) || this;
        }
        return PlaybackTimeoutError;
    }(Error));
    Error.PlaybackTimeoutError = PlaybackTimeoutError;
    var ErrorCode;
    (function (ErrorCode) {
        /**
         * Twilio was unable to validate your Access Token
         */
        ErrorCode[ErrorCode["ACCESS_TOKEN_INVALID"] = 20101] = "ACCESS_TOKEN_INVALID";
        /**
         * An error occurred playing back media content
         */
        ErrorCode[ErrorCode["PLAYBACK_MEDIA"] = 56000] = "PLAYBACK_MEDIA";
        /**
         * A network resource is not authorized
         */
        ErrorCode[ErrorCode["PLAYBACK_AUTHORIZATION"] = 56001] = "PLAYBACK_AUTHORIZATION";
        /**
         * Data or input is invalid
         */
        ErrorCode[ErrorCode["PLAYBACK_INVALID_DATA"] = 56002] = "PLAYBACK_INVALID_DATA";
        /**
         * A method parameter is invalid
         */
        ErrorCode[ErrorCode["PLAYBACK_INVALID_PARAMETER"] = 56003] = "PLAYBACK_INVALID_PARAMETER";
        /**
         * The Player or an internal object is in an invalid state
         */
        ErrorCode[ErrorCode["PLAYBACK_INVALID_STATE"] = 56004] = "PLAYBACK_INVALID_STATE";
        /**
         * A network error occurred
         */
        ErrorCode[ErrorCode["PLAYBACK_NETWORK"] = 56005] = "PLAYBACK_NETWORK";
        /**
         * A network I/O error occurred
         */
        ErrorCode[ErrorCode["PLAYBACK_NETWORK_IO"] = 56006] = "PLAYBACK_NETWORK_IO";
        /**
         * The stream is not available
         */
        ErrorCode[ErrorCode["PLAYBACK_STREAM_NOT_AVAILABLE"] = 56007] = "PLAYBACK_STREAM_NOT_AVAILABLE";
        /**
         * The current-viewers limit was reached
         */
        ErrorCode[ErrorCode["PLAYBACK_TOO_MANY_STREAMING_REQUESTS"] = 56008] = "PLAYBACK_TOO_MANY_STREAMING_REQUESTS";
        /**
         * A method or feature is not supported
         */
        ErrorCode[ErrorCode["PLAYBACK_NOT_SUPPORTED"] = 56009] = "PLAYBACK_NOT_SUPPORTED";
        /**
         * There is no source for the Player to play
         */
        ErrorCode[ErrorCode["PLAYBACK_NO_SOURCE"] = 56010] = "PLAYBACK_NO_SOURCE";
        /**
         * The Player timed out performing an operation
         */
        ErrorCode[ErrorCode["PLAYBACK_TIMEOUT"] = 56011] = "PLAYBACK_TIMEOUT";
    })(ErrorCode = Error.ErrorCode || (Error.ErrorCode = {}));
})(Error = exports.Error || (exports.Error = {}));
exports.Error = Error;
var ErrorsByCode = {
    20101: Error.AccessTokenInvalidError,
    56000: Error.PlaybackMediaError,
    56001: Error.PlaybackAuthorizationError,
    56002: Error.PlaybackInvalidDataError,
    56003: Error.PlaybackInvalidParameterError,
    56004: Error.PlaybackInvalidStateError,
    56005: Error.PlaybackNetworkError,
    56006: Error.PlaybackNetworkIOError,
    56007: Error.PlaybackStreamNotAvailableError,
    56008: Error.PlaybackTooManyStreamingRequestsError,
    56009: Error.PlaybackNotSupportedError,
    56010: Error.PlaybackNoSourceError,
    56011: Error.PlaybackTimeoutError,
};
/**
 * @private
 */
function createError(code, message, explanation) {
    message = message || 'Unknown error';
    explanation = explanation || '';
    return ErrorsByCode[code] ? new ErrorsByCode[code](explanation) : new Error(code, message, explanation);
}
exports.createError = createError;
//# sourceMappingURL=error.js.map