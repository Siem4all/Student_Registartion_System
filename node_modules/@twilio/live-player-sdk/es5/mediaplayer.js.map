{"version":3,"file":"mediaplayer.js","sourceRoot":"","sources":["../lib/mediaplayer.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO(mmalavalli): Ensure only the vendor sdk version is exported, and not the rest of the package.json fields.\nconst { dependencies } = require('../package.json');\n\nimport {\n  create,\n  ErrorType,\n  isPlayerSupported,\n  MediaPlayer as IVSMediaPlayer,\n  PlayerConfig,\n  PlayerError,\n  PlayerEventType,\n  PlayerState,\n  TextMetadataCue,\n} from 'amazon-ivs-player';\n\nimport { createError } from './error';\nimport { Player } from './player';\nimport { RequestCredentials } from './types';\nimport { PlaybackUrlEventObserver } from './eventobservers';\n\nconst { ErrorCode } = Player.Error;\nconst PLAYBACK_QUALITY_SUMMARY_PUBLISH_INTERVAL_MS = 3000;\n\nconst IVS_ERRORS = new Map();\nIVS_ERRORS.set(ErrorType.GENERIC, ErrorCode.PLAYBACK_MEDIA);\nIVS_ERRORS.set(ErrorType.AUTHORIZATION, ErrorCode.PLAYBACK_AUTHORIZATION);\nIVS_ERRORS.set(ErrorType.INVALID_DATA, ErrorCode.PLAYBACK_INVALID_DATA);\nIVS_ERRORS.set(ErrorType.INVALID_PARAMETER, ErrorCode.PLAYBACK_INVALID_PARAMETER);\nIVS_ERRORS.set(ErrorType.INVALID_STATE, ErrorCode.PLAYBACK_INVALID_STATE);\nIVS_ERRORS.set(ErrorType.NETWORK, ErrorCode.PLAYBACK_NETWORK);\nIVS_ERRORS.set(ErrorType.NETWORK_IO, ErrorCode.PLAYBACK_NETWORK_IO);\nIVS_ERRORS.set(ErrorType.NOT_AVAILABLE, ErrorCode.PLAYBACK_STREAM_NOT_AVAILABLE);\nIVS_ERRORS.set(ErrorType.NOT_SUPPORTED, ErrorCode.PLAYBACK_NOT_SUPPORTED);\nIVS_ERRORS.set(ErrorType.NO_SOURCE, ErrorCode.PLAYBACK_NO_SOURCE);\nIVS_ERRORS.set(ErrorType.TIMEOUT, ErrorCode.PLAYBACK_TIMEOUT);\n\n/**\n * In order to construct [[Player.Stats]], we need the following internal APIs\n * that are part of the MediaPlayer class.\n * @private\n */\ninterface MediaPlayerInternal extends IVSMediaPlayer {\n  getDecodedFrames: () => number;\n  getDroppedFrames: () => number;\n  getVideoBitRate: () => number;\n  setRebufferToLive: (rebufferToLive: boolean) => void;\n  setRequestCredentials: (requestCredentials: RequestCredentials) => void;\n}\n\nconst createMediaPlayerWithInternalAPIs = (config: PlayerConfig) =>\n  create(config) as MediaPlayerInternal;\n\nconst vendorPlayerVersion = dependencies['amazon-ivs-player'];\n\n/**\n * Whether the SDK supports the browser. The SDK only supports browsers which are\n * capable of running WebAssembly (WASM).\n */\nexport const isSupported = isPlayerSupported;\n\nexport class MediaPlayer extends Player {\n\n  private _playbackUrlEventObserver?: PlaybackUrlEventObserver;\n\n  constructor(\n    playbackUrl: string,\n    streamerSid: string,\n    options: Player.Options) {\n    super(\n      playbackUrl,\n      streamerSid,\n      createMediaPlayerWithInternalAPIs,\n      { ...options, vendorPlayerVersion });\n  }\n\n  protected _getState(): Player.State {\n    return {\n      [PlayerState.BUFFERING]: Player.State.Buffering,\n      [PlayerState.ENDED]: Player.State.Ended,\n      [PlayerState.IDLE]: Player.State.Idle,\n      [PlayerState.PLAYING]: Player.State.Playing,\n      [PlayerState.READY]: Player.State.Ready,\n    }[this._vendorPlayer.getState() as PlayerState];\n  }\n\n  protected _reemitVendorPlayerEvents(): () => void {\n    const getPlaybackQualitySummary: () => Player.Telemetry.Data.PlaybackQuality.Summary = () => ({\n      name: 'summary',\n      playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n      playerPosition: this._vendorPlayer.getPosition(),\n      playerStats: this.stats,\n      playerStreamerSid: this._streamerSid,\n      playerVolume: this._vendorPlayer.getVolume(),\n      timestamp: Date.now(),\n      type: 'playback-quality',\n    });\n\n    const {\n      start: startPublishingPlaybackQualitySummary,\n      stop: stopPublishingPlaybackQualitySummary,\n    } = Player.telemetry.publishPeriodically(\n      getPlaybackQualitySummary,\n      PLAYBACK_QUALITY_SUMMARY_PUBLISH_INTERVAL_MS);\n\n    let previousState = this.state;\n\n    const onState = () => {\n      const state = this.state;\n      this.emit(Player.Event.StateChanged, state);\n\n      const stateChanged: Player.Telemetry.Data.PlaybackState.Changed = {\n        from: previousState,\n        name: 'changed',\n        playerStreamerSid: this._streamerSid,\n        timestamp: Date.now(),\n        to: state,\n        type: 'playback-state',\n      };\n      Player.telemetry.publish(stateChanged);\n      previousState = state;\n\n      if (state === Player.State.Buffering || state === Player.State.Playing) {\n        startPublishingPlaybackQualitySummary();\n      } else {\n        stopPublishingPlaybackQualitySummary();\n      }\n      if (state === Player.State.Ended) {\n        this._release();\n      }\n    };\n    Object.values(PlayerState).forEach(state =>\n      this._vendorPlayer.addEventListener(state, onState));\n\n    let previousQuality = this.quality;\n    const onQualityChanged = () => {\n      const quality = this.quality;\n      this.emit(Player.Event.QualityChanged, quality);\n      const qualityChanged: Player.Telemetry.Data.PlaybackQuality.QualityChanged = {\n        from: previousQuality,\n        name: 'quality-changed',\n        playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n        playerPosition: this._vendorPlayer.getPosition(),\n        playerStreamerSid: this._streamerSid,\n        playerVolume: this._vendorPlayer.getVolume(),\n        timestamp: Date.now(),\n        to: quality,\n        type: 'playback-quality',\n      };\n      Player.telemetry.publish(qualityChanged);\n      previousQuality = quality;\n    };\n    this._vendorPlayer.addEventListener(PlayerEventType.QUALITY_CHANGED, onQualityChanged);\n\n    let previousDuration = this.duration;\n    const onDurationChanged = (duration: number) => {\n      this.emit(Player.Event.DurationChanged, duration);\n      const durationChanged: Player.Telemetry.Data.PlaybackQuality.DurationChanged = {\n        from: previousDuration,\n        name: 'duration-changed',\n        playerLiveLatency: this._vendorPlayer.getLiveLatency(),\n        playerPosition: this._vendorPlayer.getPosition(),\n        playerStreamerSid: this._streamerSid,\n        playerVolume: this._vendorPlayer.getVolume(),\n        timestamp: Date.now(),\n        to: duration,\n        type: 'playback-quality',\n      };\n      Player.telemetry.publish(durationChanged);\n      previousDuration = duration;\n    };\n    this._vendorPlayer.addEventListener(PlayerEventType.DURATION_CHANGED, onDurationChanged);\n\n    const onTextMetadataCue = (textCue: TextMetadataCue) => {\n      this.emit(Player.Event.TimedMetadataReceived, {\n        metadata: textCue.text,\n        time: textCue.startTime,\n      });\n      const timedMetadataReceived: Player.Telemetry.Data.TimedMetadataTelemetry.Received = {\n        name: 'received',\n        playerStreamerSid: this._streamerSid,\n        timedMetadataTime: textCue.startTime,\n        timestamp: Date.now(),\n        type: 'timed-metadata',\n      };\n      Player.telemetry.publish(timedMetadataReceived);\n    };\n    this._vendorPlayer.addEventListener(PlayerEventType.TEXT_METADATA_CUE, onTextMetadataCue);\n\n    const onRebuffering = () => {\n      this.emit(Player.Event.Rebuffering);\n      const rebuffering: Player.Telemetry.Data.Playback.Rebuffering = {\n        name: 'rebuffering',\n        playerPosition: this._vendorPlayer.getPosition(),\n        playerState: this._getState(),\n        playerStreamerSid: this._streamerSid,\n        timestamp: Date.now(),\n        type: 'playback',\n      };\n      Player.telemetry.publish(rebuffering);\n    };\n    this._vendorPlayer.addEventListener(PlayerEventType.REBUFFERING, onRebuffering);\n\n    const onError = ({ code, message, source, type }: PlayerError) => {\n      this._disconnect();\n      const errorExplanation = `${code} - ${message} - ${source}`;\n      const error = createError(IVS_ERRORS.get(type), message, errorExplanation);\n      this._emitPlaybackError(error);\n    };\n    if (!this._playbackUrlEventObserver) {\n      this._playbackUrlEventObserver = new PlaybackUrlEventObserver(this._vendorPlayer, this._playbackUrl);\n    }\n    this._playbackUrlEventObserver.on(PlayerEventType.ERROR, onError);\n\n    const onVolumeChanged = (level: number) => this.emit(Player.Event.VolumeChanged, level);\n    this._vendorPlayer.addEventListener(PlayerEventType.VOLUME_CHANGED, onVolumeChanged);\n\n    const onSeekCompleted = (position: number)  => {\n      this.emit(Player.Event.SeekCompleted, position);\n      const seekCompleted: Player.Telemetry.Data.Playback.SeekCompleted = {\n        name: 'seek-completed',\n        playerPosition: this._vendorPlayer.getPosition(),\n        playerState: this._getState(),\n        playerStreamerSid: this._streamerSid,\n        timestamp: Date.now(),\n        type: 'playback',\n      };\n      Player.telemetry.publish(seekCompleted);\n    };\n    this._vendorPlayer.addEventListener(PlayerEventType.SEEK_COMPLETED, onSeekCompleted);\n\n    return () => {\n      stopPublishingPlaybackQualitySummary();\n      Object.values(PlayerState).forEach(state =>\n        this._vendorPlayer.removeEventListener(state, onState));\n      this._vendorPlayer.removeEventListener(PlayerEventType.QUALITY_CHANGED, onQualityChanged);\n      this._vendorPlayer.removeEventListener(PlayerEventType.DURATION_CHANGED, onDurationChanged);\n      this._vendorPlayer.removeEventListener(PlayerEventType.TEXT_METADATA_CUE, onTextMetadataCue);\n      this._vendorPlayer.removeEventListener(PlayerEventType.REBUFFERING, onRebuffering);\n      this._vendorPlayer.removeEventListener(PlayerEventType.VOLUME_CHANGED, onVolumeChanged);\n      this._vendorPlayer.removeEventListener(PlayerEventType.SEEK_COMPLETED, onSeekCompleted);\n\n      if (this._playbackUrlEventObserver) {\n        this._playbackUrlEventObserver.release();\n      }\n    };\n  }\n}\n"]}