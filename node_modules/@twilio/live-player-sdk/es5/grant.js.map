{"version":3,"file":"grant.js","sourceRoot":"","sources":["../lib/grant.ts"],"names":[],"mappings":";;;AAAA,iCAAgC;AAEhC,+BAAyC;AAEjC,IAAA,uBAAuB,GAAK,aAAK,wBAAV,CAAW;AAE1C;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,KAAa;IAK5C,IAAI,WAAW,CAAC;IAChB,IAAI,WAAW,CAAC;IAChB,IAAI,kBAAkB,CAAC;IAEvB,IAAI;QACF,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAe,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QACrF,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC;QACxC,WAAW,GAAG,aAAa,CAAC,iBAAiB,CAAC;QAC9C,kBAAkB,GAAG,aAAa,CAAC,kBAAkB,CAAC;QAEtD,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,kBAAkB,KAAK,QAAQ;eACtE,CAAC,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,EAAE;YACtE,MAAM,IAAI,CAAC;SACZ;KACF;IAAC,WAAM;QACN,MAAM,IAAI,uBAAuB,EAAE,CAAC;KACrC;IAED,OAAO;QACL,WAAW,aAAA;QACX,kBAAkB,oBAAA;QAClB,WAAW,aAAA;KACZ,CAAC;AACJ,CAAC;AA5BD,4CA4BC","sourcesContent":["import { Error } from './error';\nimport { RequestCredentials } from './types';\nimport { decodeBase64Str } from './util';\n\nconst { AccessTokenInvalidError } = Error;\n\n/**\n * Decode the given access token and return the playback grant.\n * @private\n */\nexport function getPlaybackGrant(token: string): {\n  playbackUrl: string;\n  requestCredentials?: RequestCredentials;\n  streamerSid: string;\n} {\n  let playbackUrl;\n  let streamerSid;\n  let requestCredentials;\n\n  try {\n    const playbackGrant = JSON.parse(decodeBase64Str(token.split('.')[1])).grants.player;\n    playbackUrl = playbackGrant.playbackUrl;\n    streamerSid = playbackGrant.playerStreamerSid;\n    requestCredentials = playbackGrant.requestCredentials;\n\n    if (!playbackUrl || !streamerSid || (typeof requestCredentials === 'string'\n      && !['omit', 'same-origin', 'include'].includes(requestCredentials))) {\n      throw null;\n    }\n  } catch {\n    throw new AccessTokenInvalidError();\n  }\n\n  return {\n    playbackUrl,\n    requestCredentials,\n    streamerSid,\n  };\n}\n"]}